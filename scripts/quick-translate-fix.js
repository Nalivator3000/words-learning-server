/**
 * Quick translation fix
 * Replaces common Russian texts with English in all files
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Map of Russian -> English translations
const translations = {
    // Import section
    '–°–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω CSV –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:': 'Download CSV template:',
    '–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω CSV': 'Download CSV Template',
    '–®–∞–±–ª–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ –∏ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è': 'Template contains correct column headers and examples',
    '–ò–∑ CSV —Ñ–∞–π–ª–∞': 'From CSV File',
    '–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: –°–ª–æ–≤–æ, –ü—Ä–∏–º–µ—Ä, –ü–µ—Ä–µ–≤–æ–¥, –ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞': 'Upload CSV file with columns: Word, Example, Translation, Example Translation',
    '–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª': 'Select File',
    '–ò–∑ Google –¢–∞–±–ª–∏—Ü': 'From Google Sheets',
    '–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏—á–Ω—É—é Google —Ç–∞–±–ª–∏—Ü—É': 'Paste link to public Google spreadsheet',

    // Study section
    '–ù–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏': 'For Review',
    '–ò–∑—É—á–µ–Ω–æ': 'Learned',

    // Analytics section
    '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è': 'Learning Analytics',
    '–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è': 'Learning Progress Chart',
    'XP –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ': 'XP Earned',
    '–°–ª–æ–≤ –≤—ã—É—á–µ–Ω–æ': 'Words Learned',
    '–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è': 'Study Time',
    '–°–µ–≥–æ–¥–Ω—è': 'Today',
    '–ó–∞ –Ω–µ–¥–µ–ª—é': 'This Week',
    '–í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å': 'Average per Day',
    '–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏': 'Total Time',
    '0—á 0–º': '0h 0m',
    '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π': 'Success Rate by Exercise Type',
    '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö': 'Percentage of correct answers in different modes',
    '–°–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞': 'Most Difficult Words',
    '–°–ª–æ–≤–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —á–∞—â–µ –≤—Å–µ–≥–æ –æ—à–∏–±–∞–µ—Ç–µ—Å—å': 'Words you make mistakes in most often',
    '–ü—Ä–æ–≥–Ω–æ–∑ –±–µ–≥–ª–æ—Å—Ç–∏': 'Fluency Forecast',
    '–ü—Ä–æ–≥–Ω–æ–∑ –±–µ–≥–ª–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω': 'Fluency forecast unavailable',
    '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∏—Ç—å—Å—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑!': 'Keep learning to get a forecast!',

    // Danger zone
    '–û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞': 'Danger Zone',
    '–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å': 'Reset All Progress',
    '–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç –≤—Å–µ —Å–ª–æ–≤–∞ –Ω–∞ "–∏–∑—É—á–µ–Ω–∏–µ" –∏ –æ–±–Ω—É–ª–∏—Ç –≤—Å–µ –±–∞–ª–ª—ã! –ù–µ–æ–±—Ä–∞—Ç–∏–º–æ!': 'WARNING: This will move all words to "learning" and reset all points! Irreversible!',

    // Time periods
    'Week': 'Week',
    '–ú–µ—Å—è—Ü': 'Month',
    '–ì–æ–¥': 'Year',

    // Messages
    '–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è! –í—Å–µ–≥–æ 15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –ø–æ–º–æ–≥—É—Ç –¥–æ—Å—Ç–∏—á—å –±–æ–ª—å—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.': 'Start studying today! Just 15 minutes a day will help you achieve great results.',
    '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö': 'No data on difficult words',
    '–ù–µ—Ç —Å–ª–æ–≤': 'No words',

    // Analytics additional
    '–°–ª–æ–≤–∞': 'Words',
    '–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏': 'Success Rate',
    '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:': 'Success:',
    '–ü—Ä–∞–≤–∏–ª—å–Ω–æ:': 'Correct:',
    '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ:': 'Incorrect:',
    '–í—Å–µ–≥–æ:': 'Total:',
    '–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ (%)': 'Success Rate (%)',
    ' –æ—à–∏–±–æ–∫': ' errors',
    ' –ø–æ–ø—ã—Ç–æ–∫': ' attempts',
    '% –æ—à–∏–±–æ–∫': '% error rate',
    '–û—Ç—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ': 'Practice this word',
    ' –º–∏–Ω': ' min',
    '—á ': 'h ',
    '–º': 'm',
    'Fluency Forecast –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω': 'Fluency Forecast unavailable',
    '–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–µ–≥–ª–æ—Å—Ç–∏': 'Fluency Achievement Forecast',
    '–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞': 'Expected Date',
    '–û—Å—Ç–∞–ª–æ—Å—å ': 'Remaining ',
    ' –¥–Ω–µ–π': ' days',
    '–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!': 'Goal achieved!',
    '–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å': 'Current Progress',
    '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏': 'Model Confidence',
    '–¢–µ–∫—É—â–∏–π —Ç–µ–º–ø': 'Current Pace',
    ' —Å–ª–æ–≤/–Ω–µ–¥': ' words/week',
    '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä': 'Multiple Choice',
    '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞': 'Word Building',
    '–ù–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞': 'Typing',
    '–ö–∞—Ä—Ç–æ—á–∫–∏': 'Flashcards',
    '–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ': 'Listening',
    '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!': 'Great work!',
    'Today –≤—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å –±–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ!': 'You studied more than usual today!'
};

function replaceInFile(filePath, replacements) {
    try {
        let content = fs.readFileSync(filePath, 'utf-8');
        let modified = false;

        for (const [russian, english] of Object.entries(replacements)) {
            const regex = new RegExp(escapeRegex(russian), 'g');
            if (content.includes(russian)) {
                content = content.replace(regex, english);
                modified = true;
            }
        }

        if (modified) {
            fs.writeFileSync(filePath, content, 'utf-8');
            return true;
        }

        return false;
    } catch (error) {
        console.error(`Error processing ${filePath}:`, error.message);
        return false;
    }
}

function escapeRegex(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function processDirectory(dirPath, replacements) {
    const files = fs.readdirSync(dirPath);
    let modifiedCount = 0;

    for (const file of files) {
        const filePath = path.join(dirPath, file);
        const stat = fs.statSync(filePath);

        if (stat.isDirectory()) {
            // Skip node_modules, .git, etc.
            if (!['node_modules', '.git', 'store-assets', 'screenshots'].includes(file)) {
                modifiedCount += processDirectory(filePath, replacements);
            }
        } else if (file.endsWith('.html') || file.endsWith('.js')) {
            if (replaceInFile(filePath, replacements)) {
                console.log(`‚úÖ Updated: ${path.relative(process.cwd(), filePath)}`);
                modifiedCount++;
            }
        }
    }

    return modifiedCount;
}

console.log('üîÑ Quick translation fix starting...\n');

const publicDir = path.join(__dirname, '..', 'public');
const modifiedCount = processDirectory(publicDir, translations);

console.log(`\n‚úÖ Complete! Modified ${modifiedCount} files`);
console.log('\nüí° Next steps:');
console.log('   1. Test the application to verify translations');
console.log('   2. Commit changes');
console.log('   3. Deploy to production');
